// Woeful_Wolf
// Yretenai

void alignRelative(int relativeStart, int alignment) {
    local uint32 alignOffset = (((FTell() - relativeStart) / alignment) + 1) * alignment;
    FSeek(relativeStart + alignOffset);
}

void alignRelative2(int relativeStart, int alignment) {
	local uint32 v = relativeStart % alignment;
	if (v != 0) {
		FSeek(relativeStart + alignment - v);
	}
}

#include "tpXonAssetHeader.bt"

#include "tpGxMeshHead.bt"
#include "tpGxMeshHeadData.bt"

#include "tpGxTexHead.bt"
#include "tpGxTexHeadData.bt"

#include "tpTandaFontSdfParam.bt"
#include "tpArchiveFileParam.bt"

struct {
    char    id[4];
    uint32  version;
    uint32  packFileTotalSize;
    uint32  packFileSerializedSize;
    uint32  packFileResourceSize;
    uint32  pathCount;
    local uint32 pathsStartOffset = FTell();
    uint32  offsetToPaths;
    uint32  assetPackCount;
    local uint32 assetPacksStartOffset = FTell();
    uint32  offsetToAssetPacks;
    uint32  fileCount;
    local uint32 filesStartOffset = FTell();
    uint32  offsetToFiles;
} header;

if (header.pathCount != 0) {
    FSeek( header.pathsStartOffset + header.offsetToPaths );
    struct{
        struct {
            uint32  hash<format=hex>;
            local uint32 pathStartOffset = FTell();
            uint32  offsetToPath;
            uint32  unknown0;
            local uint returnPos = FTell();
            FSeek(pathStartOffset + offsetToPath);
            string path;
            FSeek(returnPos);
        } path[header.pathCount] <optimize=false>;
    } paths;
}

if (header.assetPackCount != 0) {
    FSeek( header.assetPacksStartOffset + header.offsetToAssetPacks );
    struct {
        struct {
            uint32  hash<format=hex>;
            local uint32 nameStartOffset = FTell();
            uint32  offsetToName;
            uint32  fileSize;
            local uint32 contentStartOffset = FTell();
            uint32  offsetToContentStart;
            uint32  offsetToContentEnd;
            FSeek(nameStartOffset + offsetToName);
            string name;
            
            FSeek( contentStartOffset + offsetToContentStart );
            #include "BXON.bt"
        } assetPack[header.assetPackCount] <optimize=false>;
    } assetPacks;
}

if (header.fileCount != 0) {
    FSeek( header.filesStartOffset + header.offsetToFiles );
    struct {
        struct AssetDataInfo {
            uint offset   : 31; 
            uint has_data : 1;  
        };
        struct {
            uint32 nameHash <format=hex>; // FNV-1
            local uint32 nameStartOffset = FTell();
            uint32 offsetToName;
            uint32 fileSize;
            local uint32 contentStartOffset = FTell();
            uint32  offsetToContentStart;
            AssetDataInfo assetDataInfo;
   
            local uint32 returnPos = FTell();
            FSeek(nameStartOffset + offsetToName);
            string name;  
            FSeek(contentStartOffset + offsetToContentStart);
            char id[4];
            FSkip(-4);
            if (id == "BXON") {
                #include "BXON.bt"
            } else if (id == "CJF") {
                #include "CJF.bt"
            } else if (id == "KPK") {
                #include "KPKy.bt"
            }

            FSeek(returnPos);
        } file[header.fileCount] <optimize=false>;
    } files;

    if (header.packFileResourceSize != 0) {
	    local int i;
	    for (i = 0; i < header.fileCount; i++) {
	        if (files.file[i].assetDataInfo.has_data) {
                FSeek(header.packFileSerializedSize + files.file[i].assetDataInfo.offset);
                
	            struct {
	        	    if (files.file[i].content.AssetTypeName == "tpGxMeshHead") {
		                tpGxMeshHeadData meshData(files.file[i].content.meshHead);
		            } else if (files.file[i].content.AssetTypeName == "tpGxTexHead") {
		        	    tpGxTexHeadData texData(files.file[i].content.texHead);
		            }
	            } assetsData <optimize=false>;
            }
	    }
    }
 }